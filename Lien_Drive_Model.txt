https://drive.google.com/file/d/19_20RZgwLidd2glXrQi76xg3aZ0mcZm_/view?usp=share_link





# Importing all necessary libraries
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
 
import tensorflow as tf
#import tensorflow_addons as tfa
import numpy as np
import pandas as pd
import keras
import cv2
import statistics
from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten, Input
from keras.layers import Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.layers import Input, Dense, Conv2D, Activation, MaxPool2D
from tensorflow.keras.layers import BatchNormalization, Flatten, Reshape, Conv2DTranspose, LeakyReLU
from tensorflow.keras.optimizers import Adam
import os
from tensorflow.keras.models import Model
from tensorflow.keras import layers, losses
from keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import mean_absolute_error as mae
from skimage import io
import matplotlib.pyplot as plt
%matplotlib inline
import gc
from tensorflow.keras.preprocessing.image import ImageDataGenerator





def predictionImage(imagePath,model):
  import matplotlib.pyplot as plt
  import matplotlib.image as mpimg
  from keras.models import load_model
  from PIL import Image
  import keras.utils as image
  import numpy as np
  model = load_model(model)
  imagee = image.load_img(imagePath, target_size=(224, 224))
  x = image.img_to_array(imagee)
  x = np.expand_dims(x, axis=0)
  x = tf.keras.applications.mobilenet.preprocess_input(x)
  preds = model.predict(x)
  predicted_classes = preds.argmax(axis=1)
  labels = {0: 'Image à exclure', 1: 'Image à retoucher', 2: 'Image parfaite'}
  predicted_labels = [labels[i] for i in predicted_classes]
  imgplot = plt.imshow(imagee)
  imgplt = plt.axis('off')
  imgplt = plt.title(predicted_labels)

  return plt.show()
